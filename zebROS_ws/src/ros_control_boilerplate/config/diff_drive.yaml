# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 50
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: left_drive,     type: can_talon_srx, can_id: 1}
       - {name: left_follower,  type: can_talon_srx, can_id: 2}
       - {name: right_drive,    type: can_talon_srx, can_id: 3}
       - {name: right_follower, type: can_talon_srx, can_id: 4}

   # Add more data for each joint here - intitial mode, encoder type
   #    PIDF settings, limit switch settings, etc

   # Not used for now, maybe not used at all if sim
   # is aware of Talon mode switching
   sim_control_mode: 1 # 0: position, 1: velocity

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 50
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 50

diff_drive_controller:
    type:       talon_diff_drive_controller/TalonDiffDriveController
    left_wheel: ['left_drive_joint']
    right_wheel: ['right_drive_joint']
    publish_rate: 50
    pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    # fix me
    wheel_separation: .7112
    wheel_radius: 0.0762

    cmd_vel_timeout: 0.5 # we test this separately, give plenty for the other tests
    left_drive_joint:
        joint: left_drive
        close_loop_values:
            - {p: 0.3, i: 0, d: 0, f: 0.49, i_zone: 0}
            - {p: 2, i: 0, d: 0, f: 0, i_zone: 0}
        sensor_phase: True
    right_drive_joint:
        joint: right_drive
        close_loop_values:
            - {p: 0.3, i: 0, d: 0, f: 0.49, i_zone: 0}
            - {p: 2, i: 0, d: 0, f: 0, i_zone: 0}
        invert_output: True
        sensor_phase: True

left_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: left_follower
    follow_joint: left_drive

right_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: right_follower
    follow_joint: right_drive
    invert_output: True # Same as right drive
