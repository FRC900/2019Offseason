# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   run_hal_robot: false
   can_interface: can0
   joints:
       - {name: left_drive,     type: can_talon_srx, can_id: 10, local: true}
       - {name: left_follower,  type: can_talon_srx, can_id: 11, local: true}
       - {name: right_drive,    type: can_talon_srx, can_id: 20, local: true}
       - {name: right_follower, type: can_talon_srx, can_id: 21, local: true}
       - {name: robot_code_ready_jetson, type: ready}

match_state_listener_controller:
   type:    state_listener_controller/MatchStateListenerController
   topic:   /frcrobot_rio/match_data
         
# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

diff_drive_controller:
    type:       talon_diff_drive_controller/TalonDiffDriveController
    left_wheel: ['left_drive_joint']
    right_wheel: ['right_drive_joint']
    publish_rate: 100
    pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    # fix me
    wheel_separation: .7112
    #wheel_radius: 0.0762
    wheel_radius: 1.0

    cmd_vel_timeout: 0.5 # we test this separately, give plenty for the other tests
    left_drive_joint:
        joint: left_drive
        feedback_type: QuadEncoder
        close_loop_values:
            - {p: 2.0, i: 0.000, d: 00.0, f: 3.09, i_zone: 000}
        sensor_phase: false
        conversion_factor: 0.5045655 #gearbox math here
        voltage_compensation_enable: true
        voltage_compensation_saturation: 19.0
        dynamic_reconfigure: true
    right_drive_joint:
        joint: right_drive
        feedback_type: QuadEncoder
        close_loop_values:
            - {p: 2.0, i: 0.000, d: 00.0, f: 3.09, i_zone: 000}
        invert_output: True
        sensor_phase: false
        conversion_factor: 0.5045655 #gearbox math here
        voltage_compensation_enable: true
        voltage_compensation_saturation: 19.0
        dynamic_reconfigure: true

left_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: left_follower
    follow_joint: left_drive

right_follower_controller:
    type: talon_controllers/TalonFollowerController
    joint: right_follower
    follow_joint: right_drive
    invert_output: True # Same as right drive

base_velocity_controller:
    type: talon_controllers/TalonVelocityCloseLoopController
    joint: left_drive
    feedback_type: QuadEncoder
    close_loop_values:
        - {p: 2.0, i: 0.000, d: 00.0, f: 3.09, i_zone: 000}
    invert_output: False
    sensor_phase: False
    peak_output_forward: 1.0
    peak_output_reverse: -1.0
    #encoder_ticks_per_rotation: 
    # Gearbox is 0.06428
    # Wheel circumfrence = 11.38827in = .448357m
    # 2Pi radians per rotation
    # Value = .06428 * .448357 / 2Pi = .004587006
    conversion_factor: 0.5045655 #gearbox math here
    #nominal_output_forward: 0.0
    #nominal_output_reverse: 0.0
    voltage_compensation_enable: true
    voltage_compensation_saturation: 19.0
    dynamic_reconfigure: true

base_follower1_controller:
    type: talon_controllers/TalonFollowerController
    joint: left_follower
    invert_output: False
    follow_joint: left_drive

base_follower2_controller:
    type: talon_controllers/TalonFollowerController
    joint: right_drive
    invert_output: True
    follow_joint: left_drive

base_follower3_controller:
    type: talon_controllers/TalonFollowerController
    joint: right_follower
    invert_output: True
    follow_joint: left_drive

