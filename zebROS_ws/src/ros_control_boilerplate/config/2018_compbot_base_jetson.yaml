# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0
    
   joints:
       
       - {name: elevator_joint, type: can_talon_srx, can_id: 0, local: true}
       - {name: fl_drive, type: can_talon_srx, can_id: 21, local: true}
       - {name: fl_angle, type: can_talon_srx, can_id: 11, local: true}
       - {name: fr_drive, type: can_talon_srx, can_id: 22, local: true}
       - {name: fr_angle, type: can_talon_srx, can_id: 12, local: true}
       - {name: br_drive, type: can_talon_srx, can_id: 24, local: true}
       - {name: br_angle, type: can_talon_srx, can_id: 14, local: true}
       - {name: bl_drive, type: can_talon_srx, can_id: 23, local: true}
       - {name: bl_angle, type: can_talon_srx, can_id: 13, local: true}
         #- {name: navx_mxp, type: navX, frame_id: navx, id: 0, local: false}
         #- {name: compressor, type: compressor, pcm_id: 0}
         #- {name: pdp, type: pdp}
       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?
         
# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states


#Create controllers for main mechanisms on robot
elevator_controller:
    type:   elevator_controller/ElevatorController
    elevator_joint_: "elevator"
    elevator: 
        type: talon_controllers/TalonMotionMagicCloseLoopControllerInterface 
        joint: elevator_joint




# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 50

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of 
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

pdp_state_controller:
   type:         pdp_state_controller/PDPStateController
   publish_rate: 20

pcm_state_controller:
   type : pcm_state_controller/PCMStateController
   publish_rate: 20

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

# These controllers are defined for testing indivudal motors 
# but are not actually used for normal swerve drive control
fl_drive_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: fl_drive
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

fl_angle_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: fl_angle
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

fr_drive_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: fr_drive
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

fr_angle_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: fr_angle
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

bl_drive_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: bl_drive
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

bl_angle_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: bl_angle
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

br_drive_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: br_drive
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True

br_angle_percentout_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: br_angle
    feedback_type: CTRE_MagEncoder_Absolute
    dynamic_reconfigure: True
    voltage_compensation_Enable: True
