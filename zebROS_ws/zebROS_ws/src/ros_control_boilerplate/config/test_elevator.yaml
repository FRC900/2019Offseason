#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO       This yaml is depreciated.       #TODO
#TODO      Please use the elevator.yaml     #TODO
#TODO         and main_frcrobot.yaml        #TODO
#TODO  unless you are explictly modifying   #TODO
#TODO    and using this yaml for testing    #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO
#TODO                                       #TODO

# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 50
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: lift, type: can_talon_srx, can_id: 41}
       - {name: lift_follower1, type: can_talon_srx, can_id: 42}
       - {name: lift_follower2, type: can_talon_srx, can_id: 43}
       - {name: pivot, type: can_talon_srx, can_id: 51}
       - {name: intake, type: can_talon_srx, can_id: 31}
       - {name: intake_follower1, type: can_talon_srx, can_id: 32}
       - {name: clamp, type: double_solenoid, pcm: 0, forward_id: 0, reverse_id: 1}
       - {name: intake_left_up, type: double_solenoid, pcm: 0, forward_id: 2, reverse_id: 3}
       - {name: intake_right_up, type: double_solenoid, pcm: 0, forward_id: 4, reverse_id: 5}
       - {name: intake_left_spring, type: double_solenoid, pcm: 0, forward_id: 6, reverse_id: 7}
       - {name: intake_right_spring, type: double_solenoid, pcm: 0, forward_id: 0, reverse_id: 1}



#TODO: fix ids for pneumatics   
#TODO: add "spring" pneumatics and some sensors
# Add more data for each joint here - intitial mode, encoder type
   #    PIDF settings, limit switch settings, etc

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 20

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 20

elevator_controller:
    type:       elevator_controller/ElevatorController
    lift: "lift_joint"
    intake: "intake_joint"
    pivot: "pivot_joint"
    arm_length: 0.495 #FIX
    max_extension: 3.0 #FIX
    min_extension: 0.25 #FIX
    
    hook_depth: 0.1 #FIX
    hook_min_height: 1 #FIX
    hook_max_height: 1.1 #FIX
    
    polygon_points: [-1.0, .127, 0.1, .127, 0.75, .127, 0.75, -1.0, -1.0, -1.0, -1.0, .127]    
    lift_joint:
        joint: lift
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: False
        feedback_type: CTRE_MagEncoder_Absolute
        conversion_factor: 1 #FIX
        motion_cruise_velocity: 2
        motion_acceleration: 5
    pivot_joint:
        joint: pivot
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: False
        feedback_type: CTRE_MagEncoder_Absolute
        conversion_factor: 1 #FIX
        motion_cruise_velocity: 10
        motion_acceleration: 20
    intake_joint:
        joint: intake
        invert_output: False
        sensor_phase: False



lift_follower1_controller:
    type: talon_controllers/TalonFollowerController
    joint: lift_follower1
    follow_joint: lift

#hypothetically might have inverts

lift_follower2_controller:
    type: talon_controllers/TalonFollowerController
    joint: lift_follower2
    follow_joint: lift

#hypothetically might have inverts

intake_follower1_controller:
    type: talon_controllers/TalonFollowerController
    joint: intake_follower1
    follow_joint: intake
    invert_output: True #opposite of intake

intake_left_up_controller:
    type: position_controllers/JointPositionController
    joint: intake_left_up

intake_right_up_controller:
    type: position_controllers/JointPositionController
    joint: intake_right_up

clamp_controller:
    type: position_controllers/JointPositionController
    joint: clamp

intake_right_spring_controller:
    type: position_controllers/JointPositionController
    joint: intake_right_spring

intake_left_spring_controller:
    type: position_controllers/JointPositionController
    joint: intake_left_spring
