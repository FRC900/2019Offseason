# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 20
  cycle_time_error_threshold: 0.01

hardware_interface:
   joints:
       - {name: joystick_rumble, type: rumble, rumble_port: 0}
       - {name: digital1, type: digital_output, dio_channel: 0}
       - {name: digital2, type: digital_output, dio_channel: 1}
       - {name: digital3, type: digital_output, dio_channel: 2}
       - {name: digital4, type: digital_output, dio_channel: 3}
       - {name: digital5, type: digital_output, dio_channel: 4}
       - {name: digital6, type: digital_output, dio_channel: 5}
       - {name: digital7, type: digital_output, dio_channel: 6}
       - {name: digital8, type: digital_output, dio_channel: 7}
       - {name: digital9, type: digital_output, dio_channel: 8}
       - {name: digital10, type: digital_output, dio_channel: 9}
       - {name: analog_pressure_sensor, type: analog_input, analog_channel: 0, analog_a: .0633897, analog_b: 29.9}
       - {name: mech_joint1, type: can_talon_srx, can_id: 10}
       - {name: mech_joint2, type: can_talon_srx, can_id: 11}

talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 10


joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 20
# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 20

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/


# Create a controller called talon1_controller
#  That name is used by spawner in the launch file to 
#  actually start this controller
# The joint it controls is talon_1. This should match
# up with one of the names in the top-level joints list
# above.  
# The type is a talon_controllers/TalonController
<<<<<<< 9fc3200015b18b64680544d70d596a5e1edd1d6d

rumble_controller:
    type: position_controllers/JointPositionController
    joint: joystick_rumble

digital1_controller:
    type: position_controllers/JointPositionController
    joint: digital1

digital2_controller:
    type: position_controllers/JointPositionController
    joint: digital2

digital3_controller:
    type: position_controllers/JointPositionController
    joint: digital3

digital4_controller:
    type: position_controllers/JointPositionController
    joint: digital4

digital5_controller:
    type: position_controllers/JointPositionController
    joint: digital5

digital6_controller:
    type: position_controllers/JointPositionController
    joint: digital6

digital7_controller:
    type: position_controllers/JointPositionController
    joint: digital7

digital8_controller:
    type: position_controllers/JointPositionController
    joint: digital8

digital9_controller:
    type: position_controllers/JointPositionController
    joint: digital9

digital10_controller:
    type: position_controllers/JointPositionController
    joint: digital10

mech_controller:
    type: mech_controller/MechController
    joint_names: ['mech_joint1', 'mech_joint2']
    mech_joint1:
        joint: mech_joint1
    mech_joint2:
        joint: mech_joint2
    invert_output: True

