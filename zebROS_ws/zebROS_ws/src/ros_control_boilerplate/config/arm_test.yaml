# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 23
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: arm_joint, type: can_talon_srx, can_id: 9}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 20

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 20

arm_controller:
    type: arm_controller/ArmController
    arm: "arm_joint"
    position_array: [-3.25512, -1.78401, -0.17947]
    forward_soft_limit: 0.0
    reverse_soft_limit: -3.4
    arm_joint: "arm"
    arm:
        joint: arm_joint
        motion_cruise_velocity: 3 # wrong
        motion_acceleration: 3 # wrong
        close_loop_values:
            - {p: .4, i: 0.0005, d: 0.2, f: 0.1669, i_zone: 750, closed_loop_peak_output: .5} 
            - {p: .5, i: 0.0005, d: 7.5, f: 0.0235389351901052, i_zone: 750, closed_loop_peak_output: 1.0}
        invert_output: False
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Absolute
        conversion_factor: 0.0454676
        current_limit_continuous_amps: 15
        current_limit_enable: True

imu_sensor_controller:
   type:         imu_sensor_controller/ImuSensorController
   publish_rate: 20

pdp_state_controller:
   type:         pdp_state_controller/PDPStateController
   publish_rate: 20
